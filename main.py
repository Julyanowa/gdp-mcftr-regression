from descriptive_statistics import StatsAnalyzer
from hypothesis_testing import HypothesisTests
from model_verification import RegressionVerifier
import pandas as pd
import matplotlib.pyplot as plt

# === 1. –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ===
data = pd.read_csv(r"D:\pgAdmin1\gdp_value_mcftr.csv", sep=";")
data.columns = data.columns.str.strip()

# --- –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç –∫ datetime ---
if "date" in data.columns:
    data["date"] = pd.to_datetime(data["date"], dayfirst=True)

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º X –∏ Y ---
X = data["gdp_value"].astype(float).tolist()
Y = data["mcftr_index"].astype(float).tolist()

print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n")


# === 2. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ ===
def analyze_model(X, Y, label):
    print(f"{'='*50}\nüìä {label}\n{'='*50}")
    
    stats_x = StatsAnalyzer(X)
    stats_y = StatsAnalyzer(Y)
    print(f"X mean={stats_x.mean():.3f}, std={stats_x.std_dev():.3f}")
    print(f"Y mean={stats_y.mean():.3f}, std={stats_y.std_dev():.3f}")
    
    # --- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ---
    t_emp, t_cr, significant = HypothesisTests.t_test_correlation(X, Y)
    r_value = stats_x.pearson_corr(Y)
    print(f"r = {r_value:.3f}, t_emp={t_emp:.3f}, t_cr={t_cr:.3f}, significant={significant}")
    
    # --- –†–µ–≥—Ä–µ—Å—Å–∏—è ---
    reg = RegressionVerifier(X, Y)
    print(f"Regression: Y = {reg.a:.3f} + {reg.b:.3f}*X")
    print(f"R¬≤ = {reg.r_squared():.3f}")
    
    # --- F-test ---
    F_emp = reg.f_test()
    df_model = 1
    df_resid = len(X) - 2
    F_cr, F_significant = HypothesisTests.f_test(F_emp, df_model, df_resid)
    print(f"F-test: F_emp={F_emp:.3f}, F_cr={F_cr:.3f}, significant={F_significant}")
    
    # --- t-—Ç–µ—Å—Ç—ã ---
    t_a, t_b = reg.t_values()
    t_cr_a, sig_a = HypothesisTests.t_test(t_a, df_resid)
    t_cr_b, sig_b = HypothesisTests.t_test(t_b, df_resid)
    print(f"T-test a: t_emp={t_a:.3f}, t_cr={t_cr_a:.3f}, significant={sig_a}")
    print(f"T-test b: t_emp={t_b:.3f}, t_cr={t_cr_b:.3f}, significant={sig_b}")
    
    return reg, r_value, F_emp, F_cr, F_significant, t_a, sig_a, t_b, sig_b


# === 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
def save_report(reg, r_value, F_emp, F_cr, F_significant, t_a, sig_a, t_b, sig_b, label):
    report = f"""
==================================================
üìä –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ –ø–æ –º–æ–¥–µ–ª–∏ ({label})
==================================================
1. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:
   r = {r_value:.3f} ‚Üí {'—Å–∏–ª—å–Ω–∞—è' if abs(r_value) > 0.7 else '—Å–ª–∞–±–∞—è/—É–º–µ—Ä–µ–Ω–Ω–∞—è'} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

2. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:
   Y = {reg.a:.3f} + {reg.b:.3f} * X
   R¬≤ = {reg.r_squared():.3f} (–æ–±—ä—è—Å–Ω—è–µ—Ç {reg.r_squared()*100:.1f}% –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞)

3. F-—Ç–µ—Å—Ç:
   F_emp={F_emp:.3f}, F_cr={F_cr:.3f} ‚Üí –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {F_significant}

4. t-—Ç–µ—Å—Ç—ã:
   ‚Ä¢ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ a: t_emp={t_a:.3f}, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å={sig_a}
   ‚Ä¢ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b: t_emp={t_b:.3f}, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å={sig_b}

5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
   –ü—Ä–∏ —Ä–æ—Å—Ç–µ –í–í–ü –Ω–∞ 1000 –º–ª—Ä–¥ —Ä—É–±. –∏–Ω–¥–µ–∫—Å MCFTR –≤ —Å—Ä–µ–¥–Ω–µ–º —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {reg.b*1000:.1f} –ø—É–Ω–∫—Ç–æ–≤.

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:
–ú–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –í–í–ü. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, –∏–Ω—Ñ–ª—è—Ü–∏—é –∏ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.
==================================================
"""
    with open("report.txt", "w", encoding="utf-8") as f:
        f.write(report)
    print("\nüìù –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'report.txt'")


# === 4. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ===
reg_model, r_value, F_emp, F_cr, F_significant, t_a, sig_a, t_b, sig_b = analyze_model(X, Y, "GDP ‚Üí MCFTR Index")
save_report(reg_model, r_value, F_emp, F_cr, F_significant, t_a, sig_a, t_b, sig_b, "GDP ‚Üí MCFTR Index")

# === 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
plt.figure(figsize=(10, 6))
plt.scatter(X, Y, color='blue', label='–Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
plt.plot(X, reg_model.y_hat, color='red', linestyle='--', label='—Ä–µ–≥—Ä–µ—Å—Å–∏—è')
plt.xlabel("GDP (–º–ª—Ä–¥ —Ä—É–±.)")
plt.ylabel("MCFTR Index")
plt.title("–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: GDP ‚Üí MCFTR Index")
plt.legend()
plt.grid(alpha=0.3)
plt.savefig("regression_plot.png", dpi=300, bbox_inches="tight")
plt.show()
print("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ 'regression_plot.png'")