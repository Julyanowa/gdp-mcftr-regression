from collections import Counter

class StatsAnalyzer:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data)/len(self.data)
    
    def variance(self):
         m = self.mean()
         n = len(self.data)
         return sum((x - m) ** 2 for x in self.data) / n
    
    def std_dev(self):
        return self.variance() ** 0.5
    
    def median(self):
        sorted_data = sorted(self.data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2
        
    def mode(self):
        #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        if not self.data:
            return None
        counts = Counter(self.data)
        max_count = max(counts.values())
        modes = [val for val, count in counts.items() if count == max_count]
        return modes    
    
    def variation(self):
        mean_copy = self.mean()           
        return self.std_dev() / mean_copy if mean_copy != 0 else None

    def skewness(self): #–∞—Å–∏–º–º–µ—Ç—Ä–∏—è
        n = len(self.data)
        m = self.mean()
        s = self.std_dev()
        if s == 0:
          return None
        return sum((x - m) ** 3 for x in self.data) / (n * s**3)
    
    def kurtosis(self): #—ç–∫—Å—Ü–µ—Å—Å
        n = len(self.data)
        m = self.mean()
        s = self.std_dev()
        if s == 0:
            return None
        return sum((x - m) ** 4 for x in self.data) / (n * s**4) - 3
    
    def covariance(self, other_data):
        if len(self.data) != len(other_data):
         return None  # –î–ª–∏–Ω—ã –≤—ã–±–æ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        n = len(self.data)
        mean_x = self.mean()
        mean_y = sum(other_data) / n
        return sum((self.data[i] - mean_x) * (other_data[i] - mean_y) for i in range(n)) / n
    
    def pearson_corr(self, other_data):
        cov = self.covariance(other_data)
        std_x = self.std_dev()
        std_y = StatsAnalyzer(other_data).std_dev()
        if std_x == 0 or std_y == 0:
            return None
        return cov / (std_x * std_y)

if __name__ == "__main__":
    # –ú–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (X ‚Äî –≤—ã–ø—É—Å–∫, Y ‚Äî –∑–∞—Ç—Ä–∞—Ç—ã)
    X = [1, 2, 4, 3, 5, 3, 4]
    Y = [3, 7, 15, 10, 17, 10, 15]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analyzer_X = StatsAnalyzer(X)
    analyzer_Y = StatsAnalyzer(Y)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è X
    print("üìä –ê–Ω–∞–ª–∏–∑ –≤—ã–±–æ—Ä–∫–∏ X (–≤—ã–ø—É—Å–∫, —Ç—ã—Å. —à—Ç.)")
    print(f"–°—Ä–µ–¥–Ω–µ–µ: {analyzer_X.mean():.2f}")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {analyzer_X.median():.2f}")
    print(f"–ú–æ–¥–∞: {analyzer_X.mode()}")
    print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {analyzer_X.variance():.2f}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {analyzer_X.std_dev():.2f}")
    print(f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {analyzer_X.skewness():.2f}")

    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è Y
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—ã–±–æ—Ä–∫–∏ Y (–∑–∞—Ç—Ä–∞—Ç—ã, —É—Å–ª. –µ–¥.)")
    print(f"–°—Ä–µ–¥–Ω–µ–µ: {analyzer_Y.mean():.2f}")
    print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {analyzer_Y.variance():.2f}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {analyzer_Y.std_dev():.2f}")
    print(f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {analyzer_Y.skewness():.2f}")

    # –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)
    cov = analyzer_X.covariance(Y)
    corr = analyzer_X.pearson_corr(Y)

    print("\nüìä –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ X –∏ Y")
    print(f"–ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è: {cov:.2f}")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞: {corr:.2f}")

  

  

    
        
    
        
    
        
    

